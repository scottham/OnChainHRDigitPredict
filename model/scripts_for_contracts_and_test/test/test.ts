import * as fs from "fs";
import { expect } from "chai";
import { ethers } from "hardhat";

describe("MNISTNFT Contract", function () {
  let conv2d: any;
  let fcLayer: any;
  let mnistNft: any;
  let owner: any;

  before(async function () {
    [owner] = await ethers.getSigners();

    const Convolution2D = await ethers.getContractFactory("Convolution2D");
    conv2d = await Convolution2D.deploy();
    await conv2d.waitForDeployment();
    console.log("Convolution2D deployed to:", await conv2d.getAddress());
  

    const FullyConnectedLayer = await ethers.getContractFactory("FullyConnectedLayer");
    fcLayer = await FullyConnectedLayer.deploy();
    await fcLayer.waitForDeployment();
    console.log("FullyConnectedLayer deployed to:", await fcLayer.getAddress());
  

    const MNISTNFT = await ethers.getContractFactory("MNISTNFT");
    mnistNft = await MNISTNFT.deploy(await conv2d.getAddress(), await fcLayer.getAddress());
    await mnistNft.waitForDeployment();
    console.log("MNISTNFT deployed to:", await mnistNft.getAddress());
  });

  it("should mint an NFT with model params", async function () {

    const rawData = fs.readFileSync("change to the best model params json", "utf-8");
    const params = JSON.parse(rawData);


    const conv1Weight = params.conv1; // number[][][][]
    const conv1Bias = params.conv1_bias; // number[]
    const conv2Weight = params.conv2; // number[][][][]
    const conv2Bias = params.conv2_bias; // number[]
    const fcWeight = params.fc; // number[][]
    const fcBias = params.fc_bias; // number[]
    


    const tx = await mnistNft.mint(
      conv1Weight,
      conv1Bias,
      conv2Weight,
      conv2Bias,
      fcWeight,
      fcBias
    );
    const receipt = await tx.wait();


    const tokenId = 1;

    const tokenOwner = await mnistNft.ownerOf(tokenId);
    expect(tokenOwner).to.equal(owner.address);
  });

  it("should run inference on the minted NFT", async function () {
    const tokenId = 1;


    const input28x28 = Array.from({ length: 28 }, () => Array(28).fill(0));

    const result = await mnistNft.inference(tokenId, input28x28);
    console.log("Inference result = ", result.toString());
  });

  it("should run inference on the minted NFT on test images", async function () {
    const tokenId = 1;

    // Load test images and labels
    const rawTestData = fs.readFileSync("change to the data json generated by generate_test_data.py", "utf-8");
    const testData = JSON.parse(rawTestData);
    const testImages = testData.images;
    const testLabels = testData.labels;
    
    // Test inference on each image
    let correct = 0;
    for (let i = 0; i < testImages.length; i++) {
      const prediction = await mnistNft.inference(tokenId, testImages[i]);
      console.log(`Image ${i}: Predicted ${prediction}, Actual ${testLabels[i]}`);
      if (prediction.toString() === testLabels[i].toString()) {
        correct++;
      }
    }
    
    const accuracy = (correct / testImages.length) * 100;
    console.log(`Test Accuracy: ${accuracy}%`);
    // expect(accuracy).to.be.greaterThan(80); // Expecting at least 80% accuracy
  }).timeout(4000000);;

});
